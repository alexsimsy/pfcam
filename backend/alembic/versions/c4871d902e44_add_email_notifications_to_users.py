"""Add email_notifications to users

Revision ID: c4871d902e44
Revises: 001
Create Date: 2025-06-30 07:56:10.595387

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'c4871d902e44'
down_revision = '001'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('camera_settings', sa.Column('is_active', sa.Boolean(), nullable=True))
    op.alter_column('camera_settings', 'settings_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=False)
    op.alter_column('camera_settings', 'settings_version',
               existing_type=sa.VARCHAR(length=20),
               nullable=True)
    op.alter_column('camera_settings', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('camera_settings', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.drop_constraint('camera_settings_camera_id_key', 'camera_settings', type_='unique')
    op.create_index(op.f('ix_camera_settings_id'), 'camera_settings', ['id'], unique=False)
    op.drop_constraint('camera_settings_camera_id_fkey', 'camera_settings', type_='foreignkey')
    op.create_foreign_key(None, 'camera_settings', 'cameras', ['camera_id'], ['id'])
    op.add_column('cameras', sa.Column('camera_metadata', sa.JSON(), nullable=True))
    op.alter_column('cameras', 'port',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('cameras', 'use_ssl',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('cameras', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('cameras', 'is_online',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('cameras', 'last_seen',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('cameras', 'settings',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('cameras', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('cameras', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.drop_index('ix_cameras_ip_address', table_name='cameras')
    op.drop_index('ix_cameras_is_online', table_name='cameras')
    op.create_index(op.f('ix_cameras_id'), 'cameras', ['id'], unique=False)
    op.drop_column('cameras', 'metadata')
    op.add_column('events', sa.Column('event_metadata', sa.JSON(), nullable=True))
    op.alter_column('events', 'triggered_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('events', 'is_downloaded',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('events', 'is_processed',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('events', 'is_deleted',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('events', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('events', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.drop_index('ix_events_camera_id', table_name='events')
    op.drop_index('ix_events_is_downloaded', table_name='events')
    op.create_index(op.f('ix_events_event_name'), 'events', ['event_name'], unique=False)
    op.create_index(op.f('ix_events_id'), 'events', ['id'], unique=False)
    op.drop_constraint('events_user_id_fkey', 'events', type_='foreignkey')
    op.drop_constraint('events_camera_id_fkey', 'events', type_='foreignkey')
    op.create_foreign_key(None, 'events', 'cameras', ['camera_id'], ['id'])
    op.create_foreign_key(None, 'events', 'users', ['user_id'], ['id'])
    op.drop_column('events', 'metadata')
    op.add_column('users', sa.Column('email_notifications', sa.Boolean(), nullable=True))
    op.add_column('users', sa.Column('webhook_url', sa.String(), nullable=True))
    op.add_column('users', sa.Column('is_verified', sa.Boolean(), nullable=True))
    op.alter_column('users', 'role',
               existing_type=postgresql.ENUM('ADMIN', 'MANAGER', 'VIEWER', name='userrole'),
               nullable=True)
    op.alter_column('users', 'mfa_enabled',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('users', 'last_login',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.drop_constraint('users_email_key', 'users', type_='unique')
    op.drop_constraint('users_username_key', 'users', type_='unique')
    op.drop_index('ix_users_email', table_name='users')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.drop_index('ix_users_username', table_name='users')
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.create_index('ix_users_username', 'users', ['username'], unique=False)
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_index('ix_users_email', 'users', ['email'], unique=False)
    op.create_unique_constraint('users_username_key', 'users', ['username'])
    op.create_unique_constraint('users_email_key', 'users', ['email'])
    op.alter_column('users', 'last_login',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('users', 'mfa_enabled',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('users', 'role',
               existing_type=postgresql.ENUM('ADMIN', 'MANAGER', 'VIEWER', name='userrole'),
               nullable=False)
    op.drop_column('users', 'is_verified')
    op.drop_column('users', 'webhook_url')
    op.drop_column('users', 'email_notifications')
    op.add_column('events', sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'events', type_='foreignkey')
    op.drop_constraint(None, 'events', type_='foreignkey')
    op.create_foreign_key('events_camera_id_fkey', 'events', 'cameras', ['camera_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('events_user_id_fkey', 'events', 'users', ['user_id'], ['id'], ondelete='SET NULL')
    op.drop_index(op.f('ix_events_id'), table_name='events')
    op.drop_index(op.f('ix_events_event_name'), table_name='events')
    op.create_index('ix_events_is_downloaded', 'events', ['is_downloaded'], unique=False)
    op.create_index('ix_events_camera_id', 'events', ['camera_id'], unique=False)
    op.alter_column('events', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('events', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('events', 'is_deleted',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('events', 'is_processed',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('events', 'is_downloaded',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('events', 'triggered_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.drop_column('events', 'event_metadata')
    op.add_column('cameras', sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_cameras_id'), table_name='cameras')
    op.create_index('ix_cameras_is_online', 'cameras', ['is_online'], unique=False)
    op.create_index('ix_cameras_ip_address', 'cameras', ['ip_address'], unique=False)
    op.alter_column('cameras', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('cameras', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('cameras', 'settings',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('cameras', 'last_seen',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('cameras', 'is_online',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('cameras', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('cameras', 'use_ssl',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('cameras', 'port',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_column('cameras', 'camera_metadata')
    op.drop_constraint(None, 'camera_settings', type_='foreignkey')
    op.create_foreign_key('camera_settings_camera_id_fkey', 'camera_settings', 'cameras', ['camera_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_camera_settings_id'), table_name='camera_settings')
    op.create_unique_constraint('camera_settings_camera_id_key', 'camera_settings', ['camera_id'])
    op.alter_column('camera_settings', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('camera_settings', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('camera_settings', 'settings_version',
               existing_type=sa.VARCHAR(length=20),
               nullable=False)
    op.alter_column('camera_settings', 'settings_data',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.drop_column('camera_settings', 'is_active')
    # ### end Alembic commands ### 