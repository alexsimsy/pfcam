name: Create Deployment Package

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        default: '1.0.0'

permissions:
  contents: read
  actions: read

jobs:
  create-deployment-package:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version info
      id: version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Building deployment package for version: $VERSION"
        
    - name: Create deployment package (Simple)
      run: |
        chmod +x scripts/create-deployment-package-simple.sh
        ./scripts/create-deployment-package-simple.sh
        
    - name: Verify package creation
      run: |
        echo "Checking for deployment package..."
        if [ -f "build/event-cam-deployment-1.0.0.tar.gz" ]; then
          echo "✅ Deployment package created successfully"
          ls -la build/
          echo "Package size: $(du -h build/event-cam-deployment-1.0.0.tar.gz | cut -f1)"
        else
          echo "❌ Error: Deployment package was not created"
          echo "Contents of build directory:"
          ls -la build/ || echo "Build directory not found"
          exit 1
        fi
        
    - name: Upload deployment package
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: |
          build/event-cam-deployment-*.tar.gz
          build/event-cam-deployment-*.zip
          build/RELEASE_NOTES.md
        retention-days: 30
        
    - name: Create GitHub Release (Simple)
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "Creating release for tag: $TAG_NAME"
        
        # Try to create release, but don't fail if it doesn't work
        gh release create "$TAG_NAME" \
          --title "Event Cam $TAG_NAME" \
          --notes-file build/RELEASE_NOTES.md \
          --draft=false \
          --prerelease=false || {
          echo "⚠️  Could not create GitHub release automatically"
          echo "📦 Deployment package is available as an artifact"
          echo "🔗 You can manually create a release at: https://github.com/${{ github.repository }}/releases/new"
          echo "📁 Upload the files from the artifacts section"
        }
        
        # Try to upload assets if release was created
        if gh release view "$TAG_NAME" >/dev/null 2>&1; then
          echo "📤 Uploading assets to release..."
          for file in build/event-cam-deployment-*.tar.gz build/event-cam-deployment-*.zip; do
            if [ -f "$file" ]; then
              echo "Uploading $file"
              gh release upload "$TAG_NAME" "$file" --clobber || echo "Failed to upload $file"
            fi
          done
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Success message
      run: |
        echo "🎉 Deployment package created successfully!"
        echo "📦 Package files:"
        ls -la build/
        echo ""
        echo "📋 Next steps:"
        echo "1. Download the artifacts from this workflow run"
        echo "2. If GitHub release wasn't created automatically, create it manually"
        echo "3. Upload the deployment package files to the release" 