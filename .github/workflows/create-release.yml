name: Create Deployment Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        default: '1.0.0'
      create_tag:
        description: 'Create a new tag for this release'
        required: false
        default: 'false'

permissions:
  contents: write
  packages: write
  actions: read
  id-token: write

jobs:
  create-deployment-package:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Create deployment package
      run: |
        chmod +x scripts/create-deployment-package.sh
        ./scripts/create-deployment-package.sh
        
    - name: Verify package creation
      run: |
        if [ ! -f "build/event-cam-deployment-*.tar.gz" ]; then
          echo "❌ Error: Deployment package was not created"
          exit 1
        fi
        echo "✅ Deployment package created successfully"
        ls -la build/
        
    - name: Create tag if requested
      if: github.event.inputs.create_tag == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "v${{ github.event.inputs.version }}" -m "Release v${{ github.event.inputs.version }}"
        git push origin "v${{ github.event.inputs.version }}"
        
    - name: Upload deployment package
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: |
          build/event-cam-deployment-*.tar.gz
          build/event-cam-deployment-*.zip
          build/RELEASE_NOTES.md
        retention-days: 30
        
    - name: Clean up existing release
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "Cleaning up existing release for tag: $TAG_NAME"
        
        # Delete existing release if it exists
        if gh release view "$TAG_NAME" >/dev/null 2>&1; then
          echo "Deleting existing release"
          gh release delete "$TAG_NAME" --yes
        fi
        
        # Delete existing tag if it exists
        if git tag -l "$TAG_NAME" | grep -q "$TAG_NAME"; then
          echo "Deleting existing tag"
          git tag -d "$TAG_NAME"
          git push origin ":refs/tags/$TAG_NAME" || true
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create new tag
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "Creating new tag: $TAG_NAME"
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
        git push origin "$TAG_NAME"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          build/event-cam-deployment-*.tar.gz
          build/event-cam-deployment-*.zip
        body_path: build/RELEASE_NOTES.md
        draft: false
        prerelease: false
        generate_release_notes: true
        fail_on_unmatched_files: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create Draft Release
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.create_tag == 'false'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          build/event-cam-deployment-*.tar.gz
          build/event-cam-deployment-*.zip
        body_path: build/RELEASE_NOTES.md
        draft: true
        prerelease: false
        tag_name: "v${{ github.event.inputs.version }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 